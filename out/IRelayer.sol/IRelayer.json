{"abi":[{"type":"function","name":"replaceMessage","inputs":[{"name":"originalMessage","type":"bytes","internalType":"bytes"},{"name":"originalAttestation","type":"bytes","internalType":"bytes"},{"name":"newMessageBody","type":"bytes","internalType":"bytes"},{"name":"newDestinationCaller","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessage","inputs":[{"name":"destinationDomain","type":"uint32","internalType":"uint32"},{"name":"recipient","type":"bytes32","internalType":"bytes32"},{"name":"messageBody","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessageWithCaller","inputs":[{"name":"destinationDomain","type":"uint32","internalType":"uint32"},{"name":"recipient","type":"bytes32","internalType":"bytes32"},{"name":"destinationCaller","type":"bytes32","internalType":"bytes32"},{"name":"messageBody","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"replaceMessage(bytes,bytes,bytes,bytes32)":"b857b774","sendMessage(uint32,bytes32,bytes)":"0ba469bc","sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":"f7259a75"},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"originalMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"originalAttestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newMessageBody\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"newDestinationCaller\",\"type\":\"bytes32\"}],\"name\":\"replaceMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"details\":\"The `originalAttestation` must be a valid attestation of `originalMessage`.\",\"params\":{\"newDestinationCaller\":\"the new destination caller\",\"newMessageBody\":\"new message body of replaced message\",\"originalAttestation\":\"attestation of `originalMessage`\",\"originalMessage\":\"original message to replace\"}},\"sendMessage(uint32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information.\",\"params\":{\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.\",\"params\":{\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}}},\"title\":\"IRelayer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Replace a message with a new message body and/or destination caller.\"},\"sendMessage(uint32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain.\"},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain, with a specified caller on the destination domain.\"}},\"notice\":\"Sends messages from source domain to destination domain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IRelayer.sol\":\"IRelayer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[\":@memview-sol/=lib/memview-sol/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":centre-tokens.git/=lib/centre-tokens.git/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":memview-sol/=lib/memview-sol/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/IRelayer.sol\":{\"keccak256\":\"0x1510214de1adac12937c79fa6b25b0973a879219a31b149a7c11c70a8c095b3a\",\"urls\":[\"bzz-raw://6f6af107b32576803feb574d0d4413c567336be9e9499b25918c3492c87d7e2b\",\"dweb:/ipfs/QmUF51siiUMFmRw5zB5S85cEjgpUxesPc52fM5azbqscid\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"originalMessage","type":"bytes"},{"internalType":"bytes","name":"originalAttestation","type":"bytes"},{"internalType":"bytes","name":"newMessageBody","type":"bytes"},{"internalType":"bytes32","name":"newDestinationCaller","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"replaceMessage"},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessage","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes32","name":"destinationCaller","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessageWithCaller","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]}],"devdoc":{"kind":"dev","methods":{"replaceMessage(bytes,bytes,bytes,bytes32)":{"details":"The `originalAttestation` must be a valid attestation of `originalMessage`.","params":{"newDestinationCaller":"the new destination caller","newMessageBody":"new message body of replaced message","originalAttestation":"attestation of `originalMessage`","originalMessage":"original message to replace"}},"sendMessage(uint32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information.","params":{"destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.","params":{"destinationCaller":"caller on the destination domain, as bytes32","destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}}},"version":1},"userdoc":{"kind":"user","methods":{"replaceMessage(bytes,bytes,bytes,bytes32)":{"notice":"Replace a message with a new message body and/or destination caller."},"sendMessage(uint32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain."},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain, with a specified caller on the destination domain."}},"version":1}},"settings":{"remappings":["@memview-sol/=lib/memview-sol/","@openzeppelin/=lib/openzeppelin-contracts/","centre-tokens.git/=lib/centre-tokens.git/","ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","memview-sol/=lib/memview-sol/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"runs":200,"details":{"peephole":false,"jumpdestRemover":false,"orderLiterals":false,"deduplicate":false,"cse":false,"constantOptimizer":false,"yul":false}},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IRelayer.sol":"IRelayer"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/interfaces/IRelayer.sol":{"keccak256":"0x1510214de1adac12937c79fa6b25b0973a879219a31b149a7c11c70a8c095b3a","urls":["bzz-raw://6f6af107b32576803feb574d0d4413c567336be9e9499b25918c3492c87d7e2b","dweb:/ipfs/QmUF51siiUMFmRw5zB5S85cEjgpUxesPc52fM5azbqscid"],"license":null}},"version":1},"ast":{"absolutePath":"src/interfaces/IRelayer.sol","id":28017,"exportedSymbols":{"IRelayer":[28016]},"nodeType":"SourceUnit","src":"619:2465:23","nodes":[{"id":27976,"nodeType":"PragmaDirective","src":"619:22:23","nodes":[],"literals":["solidity","0.7",".6"]},{"id":28016,"nodeType":"ContractDefinition","src":"737:2346:23","nodes":[{"id":27989,"nodeType":"FunctionDefinition","src":"1189:150:23","nodes":[],"documentation":{"id":27978,"nodeType":"StructuredDocumentation","src":"762:422:23","text":" @notice Sends an outgoing message from the source domain.\n @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n @param destinationDomain Domain of destination chain\n @param recipient Address of message recipient on destination domain as bytes32\n @param messageBody Raw bytes content of message\n @return nonce reserved by message"},"functionSelector":"0ba469bc","implemented":false,"kind":"function","modifiers":[],"name":"sendMessage","parameters":{"id":27985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27980,"mutability":"mutable","name":"destinationDomain","nodeType":"VariableDeclaration","scope":27989,"src":"1219:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":27979,"name":"uint32","nodeType":"ElementaryTypeName","src":"1219:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":27982,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":27989,"src":"1253:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1253:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":27984,"mutability":"mutable","name":"messageBody","nodeType":"VariableDeclaration","scope":27989,"src":"1280:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":27983,"name":"bytes","nodeType":"ElementaryTypeName","src":"1280:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1209:103:23"},"returnParameters":{"id":27988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27987,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":27989,"src":"1331:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":27986,"name":"uint64","nodeType":"ElementaryTypeName","src":"1331:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1330:8:23"},"scope":28016,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":28003,"nodeType":"FunctionDefinition","src":"2239:195:23","nodes":[],"documentation":{"id":27990,"nodeType":"StructuredDocumentation","src":"1345:889:23","text":" @notice Sends an outgoing message from the source domain, with a specified caller on the\n destination domain.\n @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n to broadcast the message on the destination domain. This is an advanced feature, and the standard\n sendMessage() should be preferred for use cases where a specific destination caller is not required.\n @param destinationDomain Domain of destination chain\n @param recipient Address of message recipient on destination domain as bytes32\n @param destinationCaller caller on the destination domain, as bytes32\n @param messageBody Raw bytes content of message\n @return nonce reserved by message"},"functionSelector":"f7259a75","implemented":false,"kind":"function","modifiers":[],"name":"sendMessageWithCaller","parameters":{"id":27999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27992,"mutability":"mutable","name":"destinationDomain","nodeType":"VariableDeclaration","scope":28003,"src":"2279:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":27991,"name":"uint32","nodeType":"ElementaryTypeName","src":"2279:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":27994,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":28003,"src":"2313:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2313:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":27996,"mutability":"mutable","name":"destinationCaller","nodeType":"VariableDeclaration","scope":28003,"src":"2340:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27995,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2340:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":27998,"mutability":"mutable","name":"messageBody","nodeType":"VariableDeclaration","scope":28003,"src":"2375:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":27997,"name":"bytes","nodeType":"ElementaryTypeName","src":"2375:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2269:138:23"},"returnParameters":{"id":28002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28001,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":28003,"src":"2426:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":28000,"name":"uint64","nodeType":"ElementaryTypeName","src":"2426:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2425:8:23"},"scope":28016,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":28015,"nodeType":"FunctionDefinition","src":"2881:200:23","nodes":[],"documentation":{"id":28004,"nodeType":"StructuredDocumentation","src":"2440:436:23","text":" @notice Replace a message with a new message body and/or destination caller.\n @dev The `originalAttestation` must be a valid attestation of `originalMessage`.\n @param originalMessage original message to replace\n @param originalAttestation attestation of `originalMessage`\n @param newMessageBody new message body of replaced message\n @param newDestinationCaller the new destination caller"},"functionSelector":"b857b774","implemented":false,"kind":"function","modifiers":[],"name":"replaceMessage","parameters":{"id":28013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28006,"mutability":"mutable","name":"originalMessage","nodeType":"VariableDeclaration","scope":28015,"src":"2914:30:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":28005,"name":"bytes","nodeType":"ElementaryTypeName","src":"2914:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":28008,"mutability":"mutable","name":"originalAttestation","nodeType":"VariableDeclaration","scope":28015,"src":"2954:34:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":28007,"name":"bytes","nodeType":"ElementaryTypeName","src":"2954:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":28010,"mutability":"mutable","name":"newMessageBody","nodeType":"VariableDeclaration","scope":28015,"src":"2998:29:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":28009,"name":"bytes","nodeType":"ElementaryTypeName","src":"2998:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":28012,"mutability":"mutable","name":"newDestinationCaller","nodeType":"VariableDeclaration","scope":28015,"src":"3037:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":28011,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3037:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2904:167:23"},"returnParameters":{"id":28014,"nodeType":"ParameterList","parameters":[],"src":"3080:0:23"},"scope":28016,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":27977,"nodeType":"StructuredDocumentation","src":"643:93:23","text":" @title IRelayer\n @notice Sends messages from source domain to destination domain"},"fullyImplemented":false,"linearizedBaseContracts":[28016],"name":"IRelayer","scope":28017}]},"id":23}