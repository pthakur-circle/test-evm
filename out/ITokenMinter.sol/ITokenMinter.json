{"abi":[{"type":"function","name":"burn","inputs":[{"name":"burnToken","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getLocalToken","inputs":[{"name":"remoteDomain","type":"uint32","internalType":"uint32"},{"name":"remoteToken","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"mint","inputs":[{"name":"sourceDomain","type":"uint32","internalType":"uint32"},{"name":"burnToken","type":"bytes32","internalType":"bytes32"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"mintToken","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"setTokenController","inputs":[{"name":"newTokenController","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"burn(address,uint256)":"9dc29fac","getLocalToken(uint32,bytes32)":"78a0565e","mint(uint32,bytes32,address,uint256)":"d54de06f","setTokenController(address)":"e102baab"},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"remoteToken\",\"type\":\"bytes32\"}],\"name\":\"getLocalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"burnToken\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenController\",\"type\":\"address\"}],\"name\":\"setTokenController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"params\":{\"amount\":\"amount of tokens to burn. Must be less than or equal to this ITokenMinter's account balance of the given `_burnToken`.\",\"burnToken\":\"burnable token.\"}},\"getLocalToken(uint32,bytes32)\":{\"params\":{\"remoteDomain\":\"Remote domain\",\"remoteToken\":\"Remote token\"},\"returns\":{\"_0\":\"local token address\"}},\"mint(uint32,bytes32,address,uint256)\":{\"details\":\"reverts if the (`sourceDomain`, `burnToken`) pair does not map to a nonzero local token address. This mapping can be queried using getLocalToken().\",\"params\":{\"amount\":\"Amount of tokens to mint. Must be less than or equal to the minterAllowance of this TokenMinter for given `_mintToken`.\",\"burnToken\":\"Burned token address as bytes32.\",\"sourceDomain\":\"Source domain where `burnToken` was burned.\",\"to\":\"Address to receive minted tokens, corresponding to `burnToken`, on this domain.\"},\"returns\":{\"mintToken\":\"token minted.\"}},\"setTokenController(address)\":{\"params\":{\"newTokenController\":\"new token controller address\"}}},\"title\":\"ITokenMinter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"Burn tokens owned by this ITokenMinter.\"},\"getLocalToken(uint32,bytes32)\":{\"notice\":\"Get the local token associated with the given remote domain and token.\"},\"mint(uint32,bytes32,address,uint256)\":{\"notice\":\"Mints `amount` of local tokens corresponding to the given (`sourceDomain`, `burnToken`) pair, to `to` address.\"},\"setTokenController(address)\":{\"notice\":\"Set the token controller of this ITokenMinter. Token controller is responsible for mapping local tokens to remote tokens, and managing token-specific limits\"}},\"notice\":\"interface for minter of tokens that are mintable, burnable, and interchangeable across domains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ITokenMinter.sol\":\"ITokenMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[\":@memview-sol/=lib/memview-sol/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":centre-tokens.git/=lib/centre-tokens.git/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":memview-sol/=lib/memview-sol/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"src/interfaces/ITokenMinter.sol\":{\"keccak256\":\"0xa037e3f741c01b1fe56b27932cf18e21836027d415f0963257970dbbae3d9262\",\"urls\":[\"bzz-raw://a0766f25344309569654cea7860b11fc68f5b555f8188b53df21d0170f6478be\",\"dweb:/ipfs/QmYL5y9C7LpTLUELD9jSxusQrdjCdj9AiVmv2GN1K1AjEE\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"burnToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"burn"},{"inputs":[{"internalType":"uint32","name":"remoteDomain","type":"uint32"},{"internalType":"bytes32","name":"remoteToken","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getLocalToken","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint32","name":"sourceDomain","type":"uint32"},{"internalType":"bytes32","name":"burnToken","type":"bytes32"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"mint","outputs":[{"internalType":"address","name":"mintToken","type":"address"}]},{"inputs":[{"internalType":"address","name":"newTokenController","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setTokenController"}],"devdoc":{"kind":"dev","methods":{"burn(address,uint256)":{"params":{"amount":"amount of tokens to burn. Must be less than or equal to this ITokenMinter's account balance of the given `_burnToken`.","burnToken":"burnable token."}},"getLocalToken(uint32,bytes32)":{"params":{"remoteDomain":"Remote domain","remoteToken":"Remote token"},"returns":{"_0":"local token address"}},"mint(uint32,bytes32,address,uint256)":{"details":"reverts if the (`sourceDomain`, `burnToken`) pair does not map to a nonzero local token address. This mapping can be queried using getLocalToken().","params":{"amount":"Amount of tokens to mint. Must be less than or equal to the minterAllowance of this TokenMinter for given `_mintToken`.","burnToken":"Burned token address as bytes32.","sourceDomain":"Source domain where `burnToken` was burned.","to":"Address to receive minted tokens, corresponding to `burnToken`, on this domain."},"returns":{"mintToken":"token minted."}},"setTokenController(address)":{"params":{"newTokenController":"new token controller address"}}},"version":1},"userdoc":{"kind":"user","methods":{"burn(address,uint256)":{"notice":"Burn tokens owned by this ITokenMinter."},"getLocalToken(uint32,bytes32)":{"notice":"Get the local token associated with the given remote domain and token."},"mint(uint32,bytes32,address,uint256)":{"notice":"Mints `amount` of local tokens corresponding to the given (`sourceDomain`, `burnToken`) pair, to `to` address."},"setTokenController(address)":{"notice":"Set the token controller of this ITokenMinter. Token controller is responsible for mapping local tokens to remote tokens, and managing token-specific limits"}},"version":1}},"settings":{"remappings":["@memview-sol/=lib/memview-sol/","@openzeppelin/=lib/openzeppelin-contracts/","centre-tokens.git/=lib/centre-tokens.git/","ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","memview-sol/=lib/memview-sol/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"runs":200,"details":{"peephole":false,"jumpdestRemover":false,"orderLiterals":false,"deduplicate":false,"cse":false,"constantOptimizer":false,"yul":false}},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/ITokenMinter.sol":"ITokenMinter"},"evmVersion":"istanbul","libraries":{}},"sources":{"src/interfaces/ITokenMinter.sol":{"keccak256":"0xa037e3f741c01b1fe56b27932cf18e21836027d415f0963257970dbbae3d9262","urls":["bzz-raw://a0766f25344309569654cea7860b11fc68f5b555f8188b53df21d0170f6478be","dweb:/ipfs/QmYL5y9C7LpTLUELD9jSxusQrdjCdj9AiVmv2GN1K1AjEE"],"license":null}},"version":1},"ast":{"absolutePath":"src/interfaces/ITokenMinter.sol","id":28059,"exportedSymbols":{"ITokenMinter":[28058]},"nodeType":"SourceUnit","src":"619:2097:24","nodes":[{"id":28018,"nodeType":"PragmaDirective","src":"619:22:24","nodes":[],"literals":["solidity","0.7",".6"]},{"id":28058,"nodeType":"ContractDefinition","src":"784:1931:24","nodes":[{"id":28033,"nodeType":"FunctionDefinition","src":"1555:157:24","nodes":[],"documentation":{"id":28020,"nodeType":"StructuredDocumentation","src":"813:737:24","text":" @notice Mints `amount` of local tokens corresponding to the\n given (`sourceDomain`, `burnToken`) pair, to `to` address.\n @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n map to a nonzero local token address. This mapping can be queried using\n getLocalToken().\n @param sourceDomain Source domain where `burnToken` was burned.\n @param burnToken Burned token address as bytes32.\n @param to Address to receive minted tokens, corresponding to `burnToken`,\n on this domain.\n @param amount Amount of tokens to mint. Must be less than or equal\n to the minterAllowance of this TokenMinter for given `_mintToken`.\n @return mintToken token minted."},"functionSelector":"d54de06f","implemented":false,"kind":"function","modifiers":[],"name":"mint","parameters":{"id":28029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28022,"mutability":"mutable","name":"sourceDomain","nodeType":"VariableDeclaration","scope":28033,"src":"1578:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":28021,"name":"uint32","nodeType":"ElementaryTypeName","src":"1578:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":28024,"mutability":"mutable","name":"burnToken","nodeType":"VariableDeclaration","scope":28033,"src":"1607:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":28023,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1607:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":28026,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":28033,"src":"1634:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28025,"name":"address","nodeType":"ElementaryTypeName","src":"1634:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":28028,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":28033,"src":"1654:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28027,"name":"uint256","nodeType":"ElementaryTypeName","src":"1654:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1568:106:24"},"returnParameters":{"id":28032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28031,"mutability":"mutable","name":"mintToken","nodeType":"VariableDeclaration","scope":28033,"src":"1693:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28030,"name":"address","nodeType":"ElementaryTypeName","src":"1693:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1692:19:24"},"scope":28058,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":28041,"nodeType":"FunctionDefinition","src":"1976:58:24","nodes":[],"documentation":{"id":28034,"nodeType":"StructuredDocumentation","src":"1718:253:24","text":" @notice Burn tokens owned by this ITokenMinter.\n @param burnToken burnable token.\n @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n account balance of the given `_burnToken`."},"functionSelector":"9dc29fac","implemented":false,"kind":"function","modifiers":[],"name":"burn","parameters":{"id":28039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28036,"mutability":"mutable","name":"burnToken","nodeType":"VariableDeclaration","scope":28041,"src":"1990:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28035,"name":"address","nodeType":"ElementaryTypeName","src":"1990:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":28038,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":28041,"src":"2009:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28037,"name":"uint256","nodeType":"ElementaryTypeName","src":"2009:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1989:35:24"},"returnParameters":{"id":28040,"nodeType":"ParameterList","parameters":[],"src":"2033:0:24"},"scope":28058,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":28051,"nodeType":"FunctionDefinition","src":"2257:121:24","nodes":[],"documentation":{"id":28042,"nodeType":"StructuredDocumentation","src":"2040:212:24","text":" @notice Get the local token associated with the given remote domain and token.\n @param remoteDomain Remote domain\n @param remoteToken Remote token\n @return local token address"},"functionSelector":"78a0565e","implemented":false,"kind":"function","modifiers":[],"name":"getLocalToken","parameters":{"id":28047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28044,"mutability":"mutable","name":"remoteDomain","nodeType":"VariableDeclaration","scope":28051,"src":"2280:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":28043,"name":"uint32","nodeType":"ElementaryTypeName","src":"2280:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":28046,"mutability":"mutable","name":"remoteToken","nodeType":"VariableDeclaration","scope":28051,"src":"2301:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":28045,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2279:42:24"},"returnParameters":{"id":28050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28049,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":28051,"src":"2369:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28048,"name":"address","nodeType":"ElementaryTypeName","src":"2369:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2368:9:24"},"scope":28058,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":28057,"nodeType":"FunctionDefinition","src":"2648:65:24","nodes":[],"documentation":{"id":28052,"nodeType":"StructuredDocumentation","src":"2384:259:24","text":" @notice Set the token controller of this ITokenMinter. Token controller\n is responsible for mapping local tokens to remote tokens, and managing\n token-specific limits\n @param newTokenController new token controller address"},"functionSelector":"e102baab","implemented":false,"kind":"function","modifiers":[],"name":"setTokenController","parameters":{"id":28055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28054,"mutability":"mutable","name":"newTokenController","nodeType":"VariableDeclaration","scope":28057,"src":"2676:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28053,"name":"address","nodeType":"ElementaryTypeName","src":"2676:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2675:28:24"},"returnParameters":{"id":28056,"nodeType":"ParameterList","parameters":[],"src":"2712:0:24"},"scope":28058,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":28019,"nodeType":"StructuredDocumentation","src":"643:140:24","text":" @title ITokenMinter\n @notice interface for minter of tokens that are mintable, burnable, and interchangeable\n across domains."},"fullyImplemented":false,"linearizedBaseContracts":[28058],"name":"ITokenMinter","scope":28059}]},"id":24}